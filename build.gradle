plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.diffplug.spotless' version '6.25.0'
    // https://plugins.gradle.org/plugin/com.diffplug.spotless
    id 'jacoco'
}

group = 'com.sillim'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

jacoco {
    toolVersion = '0.8.11'
}

dependencies {

    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // open feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.1'

    // cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.5.4'

    // rabbitmq
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // gcs
    implementation "org.springframework.cloud:spring-cloud-gcp-starter:1.2.8.RELEASE"
    implementation "org.springframework.cloud:spring-cloud-gcp-storage:1.2.8.RELEASE"

    // firebase
    implementation 'com.google.firebase:firebase-admin:9.4.3'

    // quartz
    implementation 'org.springframework.boot:spring-boot-starter-quartz:3.4.1'

    // bucket4j
    implementation 'com.bucket4j:bucket4j_jdk17-core:8.15.0'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // Prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    jacoco {
        enabled = true
    }
    finalizedBy jacocoTestReport
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar { // jar의 templates에 문서 복사
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'BOOT-INF/classes/templates'
    }
}

spotless {

    java {
        // don't need to set target, it is inferred from java
        importOrder()
        removeUnusedImports()
        cleanthat()
        googleJavaFormat().aosp().skipJavadocFormatting()
        formatAnnotations()
        indentWithTabs()
        trimTrailingWhitespace()
        endWithNewline()
    }
} // https://github.com/diffplug/spotless/tree/main/plugin-gradle#quickstart

jacocoTestReport {
    reports {
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        xml.required = false
        xml.required = false
    }

    def QDomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '*.dto.*',
                            '*.util.LoggingUtils',
                            '*.*Config',
                            '*.DefaultUserService',
                    ] + QDomains)
                })
        )
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {

    def QDomains = []

    for (qPattern in '*.QA'..'*.QZ') {
        QDomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }

            excludes = [
                    '*.dto.*',
                    '*.util.LoggingUtils',
                    '*.*Config',
                    '*.DefaultUserService',
            ] + QDomains
        }
    }
}

// Querydsl Settings
def querydslDir = layout.buildDirectory.dir("/generated/querydsl")

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory.file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}
