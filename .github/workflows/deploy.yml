name: LetsRecordIt Server Deploy with Gradle

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  setup-build-publish-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:5.24
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/verysecret
        options: >-
          --health-cmd "cypher-shell -u neo4j -p verysecret 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Start Redis
        uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: 6

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle Wrapper
        run: ./gradlew clean spotlessCheck test
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: verysecret

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Docker build
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Hub Publish
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker ps -q -f letsrecordit-server && docker stop letsrecordit-server && docker rm letsrecordit-server
            docker images -q ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest && docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            sudo docker-compose up -d

      - name: Health Check
        uses: appleboy/ssh-action@master
        env:
            HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
            HEALTH_CHECK_CONTAINER_NAME: ${{ secrets.HEALTH_CHECK_CONTAINER_NAME }}
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          envs: HEALTH_CHECK_URL, HEALTH_CHECK_CONTAINER_NAME
          script: |
            echo "Health check for Spring application"
            
            if [ -z "$HEALTH_CHECK_URL" ]; then
              echo "HEALTH_CHECK_URL not set, please add it on github actions secrets"
              exit 1
            fi
            
            MAX_ATTEMPTS=10
            INTERVAL=10
            
            for i in $(seq 1 $MAX_ATTEMPTS); do
              status=$(curl -IsS --max-time 5 "$HEALTH_CHECK_URL" | head -n 1 | cut -d$' ' -f2)
              if [ "$status" = "200" ]; then
                echo "Health check success"
                exit 0
              fi
              echo "Attempt $i/$MAX_ATTEMPTS failed (HTTP $status), waiting 10s..."
              sleep $INTERVAL
            done
            
            echo "Health check failed"
            if [ -z "$HEALTH_CHECK_CONTAINER_NAME" ]; then
              echo "HEALTH_CHECK_CONTAINER_NAME not set, please add it on github actions secrets"
            else
              docker logs --since "10m" "$HEALTH_CHECK_CONTAINER_NAME" 2>&1 || echo "Could not get logs for container: $HEALTH_CHECK_CONTAINER_NAME"
            fi
            exit 1